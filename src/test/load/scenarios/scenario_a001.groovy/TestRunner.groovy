import static net.grinder.script.Grinder.grinder
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread

import groovy.json.JsonSlurper

// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

import org.ngrinder.http.HTTPRequest
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse
import org.ngrinder.http.cookie.Cookie
import org.ngrinder.http.cookie.CookieManager

/**
* A simple example using the HTTP plugin that shows the retrieval of a single page via HTTP.
*
* This script is automatically generated by ngrinder.
*
* @author admin
*/
@CompileStatic
@RunWith(GrinderRunner)
class TestRunner {

    private static GTest getAuthUrlTest
    private static GTest getAuthCallbackTest
    private static GTest getTopicListTest
    private static GTest getMyVideosTest
    private static GTest getStoryboardPreviewTest
    private static GTest getStoryboardTest
    private static GTest getSceneTest

    private static HTTPRequest request
    private static final Map<String, String> HEADERS = [:]
    private static final List<Cookie> COOKIES = []

    // 스레드별 고유 테스트 사용자 ID
    private String testUserId

    @BeforeProcess
    static void beforeProcess() {
        HTTPRequestControl.connectionTimeout = 30000
        HTTPRequestControl.socketTimeout = 30000

        getAuthUrlTest = new GTest(1, 'GetAuthUrl')
        getAuthCallbackTest = new GTest(2, 'GetAuthCallback')
        getTopicListTest = new GTest(3, 'GetTopicList')
        getMyVideosTest = new GTest(4, 'GetMyVideos')
        getStoryboardPreviewTest = new GTest(5, 'GetStoryboardPreview')
        getStoryboardTest = new GTest(6, 'GetStoryboard')
        getSceneTest = new GTest(7, 'GetScene')

        request = new HTTPRequest()
        grinder.logger.info('before process.')
    }

    @BeforeThread
    void beforeThread() {
        // agent-process-thread 조합으로 고유 ID 생성
        int agentNumber = grinder.agentNumber ?: 0
        int processNumber = grinder.processNumber ?: 0
        int threadNumber = grinder.threadNumber ?: 0

        // test_user_{agent}_{process}_{thread} 형식으로 고유 사용자 ID 생성
        this.testUserId = "test_user_${agentNumber}_${processNumber}_${threadNumber}"

        grinder.logger.info("Generated unique user ID: ${testUserId}")

        getAuthUrlTest.record(this, 'getAuthUrl')
        getAuthCallbackTest.record(this, 'getAuthCallback')
        getTopicListTest.record(this, 'getTopicList')
        getMyVideosTest.record(this, 'getMyVideos')
        getStoryboardPreviewTest.record(this, 'getStoryboardPreview')
        getStoryboardTest.record(this, 'getStoryboard')
        getSceneTest.record(this, 'getScene')

        grinder.statistics.delayReports = true
        grinder.logger.info('before thread.')
    }

    @Before
    void before() {
        request.headers = HEADERS
        CookieManager.addCookies(COOKIES)
        grinder.logger.info('before. init headers and cookies')
    }

    @Test
    void scenarioA() {
        // 1. 사용자 인증
        getAuthUrl()
        HTTPResponse authResponse = getAuthCallback(testUserId)

        // JWT 토큰 추출 & 헤더에 저장
        String location = authResponse.getHeader('Location')
        if (location != null && location.contains('jwtToken=')) {
            int tokenStart = location.indexOf('jwtToken=') + 9
            int tokenEnd = location.indexOf('&', tokenStart)
            if (tokenEnd == -1) tokenEnd = location.length()

            String jwtToken = location.substring(tokenStart, tokenEnd)
            grinder.logger.info('JWT extracted: ' + jwtToken.substring(0, Math.min(20, jwtToken.length())) + '...')

            headers['Authorization'] = 'Bearer ' + jwtToken
            request.headers = HEADERS
        } else {
            grinder.logger.error("Failed to extract JWT token from response location: ${location}")
            assertThat('JWT token should be present in Location header', location, containsString('jwtToken='))
        }

        // 2. 대시보드 로딩
        getTopicList()
        Thread.sleep(1000) // 토픽 목록 조회 후 1초 대기

        getMyVideos()
        Thread.sleep(500) // 내 영상 목록 조회 후 0.5초 대기

        // 스토리보드 미리보기 (각 2초 대기)
        getStoryboardPreview('189d11ae-c9bf-4ed5-8f55-40f004afa098')
        Thread.sleep(2000)

        getStoryboardPreview('f2655dc4-8daa-40c6-853c-f01acf72b4ad')
        Thread.sleep(2000)

        getStoryboardPreview('c0cf41b6-e6f6-4e40-b3da-b49e83a133d3')
        Thread.sleep(2000)

        getStoryboardPreview('8c2746c4-4613-47f8-8799-235fec7f359d')
        Thread.sleep(2000)

        HTTPResponse storyboardResponse = getStoryboard('8c2746c4-4613-47f8-8799-235fec7f359d')
        Thread.sleep(1000) // 스토리보드 상세 조회 후 1초 대기

        // 3. Scene 상세 조회
        def jsonSlurper = new JsonSlurper()
        def responseData = jsonSlurper.parseText(storyboardResponse.body)
        String currentSceneId = responseData.data.startSceneId
        def random = new Random()

        while (true) {
            HTTPResponse sceneResponse = getScene(currentSceneId)
            def sceneData = jsonSlurper.parseText(sceneResponse.body)

            // END 타입이면 루프 종료
            if (sceneData.data.sceneType == 'END') {
                grinder.logger.info('Reached END scene, finishing scenario')
                break;
            }

            // Scene 내용 파싱
            def content = jsonSlurper.parseText(sceneData.data.content)

            // 사용자가 질문을 읽고 답변하는 시간 시뮬레이션 (45-55초)
            def thinkingTime = 45000 + random.nextInt(10000)
            grinder.logger.info("User thinking time for scene ${currentSceneId}: ${thinkingTime/1000} seconds")
            Thread.sleep(thinkingTime)

            // 다음 Scene으로 이동
            currentSceneId = content.nextSceneId
            if (!currentSceneId) {
                grinder.logger.info('No nextSceneId found, finishing scenario')
                break
            }
        }

        // 4. 
    }

    HTTPResponse getAuthUrl() {
        // when
        HTTPResponse response = request.GET('https://api.orv.im/api/v0/auth/login/test')

        // then
        assertThat(response.statusCode, is(302))
        assertThat(response.location, notNullValue())

        return response
    }

    HTTPResponse getAuthCallback(String testUserId) {
        // when
        HTTPResponse response = request.GET("https://api.orv.im/api/v0/auth/callback/test?code=${testUserId}")

        // then
        assertThat(response.statusCode, is(302))
        assertThat(response.location, notNullValue())

        return response
        }

    HTTPResponse getTopicList() {
        // when
        HTTPResponse response = request.GET('https://api.orv.im/api/v0/topic/list')

        // then
        assertThat(response.statusCode, is(200))

        return response
    }

    HTTPResponse getMyVideos() {
        // when
        HTTPResponse response = request.GET('https://api.orv.im/api/v0/archive/videos/my')

        // then
        assertThat(response.statusCode, is(200))

        return response
    }

    HTTPResponse getStoryboardPreview(String storyboardId) {
        // when
        HTTPResponse response = request.GET("https://api.orv.im/api/v0/storyboard/${storyboardId}/preview")

        // then
        assertThat(response.statusCode, is(200))

        return response
    }

    HTTPResponse getStoryboard(String storyboardId) {
        // when
        HTTPResponse response = request.GET("https://api.orv.im/api/v0/storyboard/${storyboardId}")

        // then
        assertThat(response.statusCode, is(200))

        return response
    }

    HTTPResponse getScene(String sceneId) {
        // when
        HTTPResponse response = request.GET("https://api.orv.im/api/v0/storyboard/scene/${sceneId}")

        // then
        assertThat(response.statusCode, is(200))

        return response
    }
}
